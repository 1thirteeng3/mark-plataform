{
  "name": "Awards - Credit Student (ADMIN)",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "awards",
        "responseMode": "lastNode"
      },
      "id": "Webhook_Awards",
      "name": "Webhook /awards (POST)",
      "type": "n8n-nodes-base.webhook",
      "position": [200, 300]
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\n\nfunction unauthorized(msg, code){ return [{ json: { statusCode:401, error:code, message:msg } }]; }\nfunction forbidden(msg){ return [{ json: { statusCode:403, error:'FORBIDDEN', message:msg } }]; }\n\nconst auth = this.getHeader('authorization');\nif(!auth || !auth.startsWith('Bearer ')) return unauthorized('Token ausente.', 'TOKEN_MISSING');\nconst token = auth.split(' ')[1];\nconst [h,p,s] = token.split('.');\nif(!h||!p||!s) return unauthorized('Token malformado.','TOKEN_MALFORMED');\nconst validSig = crypto.createHmac('sha256',process.env.JWT_SECRET).update(`${h}.${p}`).digest('base64url');\nif(s!==validSig) return unauthorized('Assinatura inválida.','TOKEN_INVALID');\nconst payload = JSON.parse(Buffer.from(p,'base64url').toString());\nif(payload.exp && payload.exp < Date.now()/1000) return unauthorized('Token expirado.','TOKEN_EXPIRED');\nif(payload.role!=='ADMIN') return forbidden('Somente administradores podem premiar alunos.');\nreturn [{ json:{ userId:payload.userId, schoolId:payload.schoolId, role:payload.role, statusCode:200 } }];"
      },
      "id": "VerifyAdminJWT_Awards",
      "name": "VerifyAdminJWT",
      "type": "n8n-nodes-base.function",
      "position": [550, 300]
    },
    {
      "parameters": {
        "functionCode": "const { studentId, ruleId } = $json;\nif (!studentId || !ruleId) {\n  return [{ json: { statusCode: 400, error: 'VALIDATION_ERROR', message: 'Campos obrigatórios ausentes: studentId, ruleId.' } }];\n}\nreturn [{ json: { ...$json, studentId, ruleId } }];"
      },
      "id": "Function_ValidateBody",
      "name": "Validate Body",
      "type": "n8n-nodes-base.function",
      "position": [850, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, rule_name, marks_to_award FROM school_rules WHERE id = $1 AND school_id = $2;",
        "additionalFields": {
          "queryParams": "={{[$json.ruleId, $json.schoolId]}}"
        }
      },
      "id": "Postgres_GetRule",
      "name": "Postgres - Get Rule",
      "type": "n8n-nodes-base.postgres",
      "position": [1150, 200],
      "credentials": {
        "postgres": {
          "id": "__CRED_POSTGRES_ID__",
          "name": "MarkDB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, marks_balance, school_id FROM students WHERE id = $1 AND school_id = $2;",
        "additionalFields": {
          "queryParams": "={{[$json.studentId, $json.schoolId]}}"
        }
      },
      "id": "Postgres_GetStudent",
      "name": "Postgres - Get Student",
      "type": "n8n-nodes-base.postgres",
      "position": [1150, 400],
      "credentials": {
        "postgres": {
          "id": "__CRED_POSTGRES_ID__",
          "name": "MarkDB"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const rule = $items('Postgres - Get Rule')[0].json.data[0];\nconst student = $items('Postgres - Get Student')[0].json.data[0];\nif(!rule || !student){\n  return [{ json: { statusCode:404, error:'NOT_FOUND', message:'Regra ou aluno não encontrado.' } }];\n}\nconst amount = rule.marks_to_award;\nconst desc = `Crédito por Regra: ${rule.rule_name}`;\n\nconst sql = `BEGIN;\n  UPDATE students SET marks_balance = marks_balance + $1 WHERE id = $2;\n  INSERT INTO ledger_transactions (id, student_id, type, amount, description, source_rule_id, created_at)\n  VALUES (gen_random_uuid(), $2, 'CREDIT', $1, $3, $4, NOW());\nCOMMIT;`;\nreturn [{ json: { sql, values: [amount, student.id, desc, rule.id] } }];"
      },
      "id": "Function_BuildTx",
      "name": "Build Transaction SQL",
      "type": "n8n-nodes-base.function",
      "position": [1450, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{$json[\"sql\"]}}",
        "additionalFields": {
          "queryParams": "={{$json[\"values\"]}}"
        }
      },
      "id": "Postgres_RunTx",
      "name": "Postgres - Execute Transaction",
      "type": "n8n-nodes-base.postgres",
      "position": [1750, 300],
      "credentials": {
        "postgres": {
          "id": "__CRED_POSTGRES_ID__",
          "name": "MarkDB"
        }
      }
    },
    {
      "parameters": {
        "responseCode": "200",
        "responseBody": "{ \"message\": \"Premiação aplicada com sucesso!\", \"studentId\": \"{{$json.studentId}}\", \"ruleId\": \"{{$json.ruleId}}\", \"marksCredited\": {{$json.values[0]}} }"
      },
      "id": "Respond_Awards",
      "name": "Respond /awards (POST)",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [2050, 300]
    }
  ],
  "connections": {
    "Webhook /awards (POST)": { "main": [ [{ "node": "VerifyAdminJWT", "type": "main", "index": 0 }] ] },
    "VerifyAdminJWT": { "main": [ [{ "node": "Validate Body", "type": "main", "index": 0 }] ] },
    "Validate Body": { "main": [ [{ "node": "Postgres - Get Rule", "type": "main", "index": 0 }, { "node": "Postgres - Get Student", "type": "main", "index": 0 }] ] },
    "Postgres - Get Rule": { "main": [ [{ "node": "Build Transaction SQL", "type": "main", "index": 0 }] ] },
    "Postgres - Get Student": { "main": [ [{ "node": "Build Transaction SQL", "type": "main", "index": 0 }] ] },
    "Build Transaction SQL": { "main": [ [{ "node": "Postgres - Execute Transaction", "type": "main", "index": 0 }] ] },
    "Postgres - Execute Transaction": { "main": [ [{ "node": "Respond /awards (POST)", "type": "main", "index": 0 }] ] }
  },
  "settings": { "timezone": "America/Sao_Paulo" },
  "tags": ["Awards", "Admin", "CREDIT", "RBAC", "Transaction"]
}
