{
  "name": "POST /vouchers/redeem (Approach A - RETURNING id)",
  "nodes": [
    {
      "id": "1",
      "name": "Webhook - /vouchers/redeem",
      "type": "n8n-nodes-base.webhook",
      "position": [300, 300],
      "parameters": {
        "path": "vouchers/redeem",
        "httpMethod": "POST",
        "responseMode": "onLastNode"
      }
    },
    {
      "id": "2",
      "name": "VerifyStudentJWT",
      "type": "n8n-nodes-base.function",
      "position": [600, 300],
      "parameters": {
        "functionCode": "const crypto=require('crypto');function unauthorized(m,c){return[{json:{statusCode:401,error:c,message:m}}];}const h=this.getHeader('authorization');if(!h||!h.startsWith('Bearer '))return unauthorized('Token ausente.','TOKEN_MISSING');const t=h.split(' ')[1];const[p1,p2,p3]=t.split('.');if(!p1||!p2||!p3)return unauthorized('Token malformado.','TOKEN_MALFORMED');const sig=crypto.createHmac('sha256',process.env.JWT_SECRET).update(`${p1}.${p2}`).digest('base64url');if(sig!==p3)return unauthorized('Assinatura inválida.','TOKEN_INVALID');const payload=JSON.parse(Buffer.from(p2,'base64url').toString('utf8'));if(payload.role!=='STUDENT')return[{json:{statusCode:403,error:'FORBIDDEN',message:'Apenas alunos.'}}];return[{json:{studentId:payload.userId,schoolId:payload.schoolId,role:payload.role}}];"
      }
    },
    {
      "id": "3",
      "name": "Validate Body",
      "type": "n8n-nodes-base.function",
      "position": [900, 300],
      "parameters": {
        "functionCode": "if(!$json.voucherCatalogId)throw new Error('voucherCatalogId é obrigatório');return[{json:$json}];"
      }
    },
    {
      "id": "4",
      "name": "Postgres - Load Voucher Option",
      "type": "n8n-nodes-base.postgres",
      "position": [1200, 200],
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, provider, value, cost, currency FROM voucher_catalog WHERE id=$1 AND school_id=$2 AND is_available=TRUE;",
        "queryParams": "={{[$json.voucherCatalogId,$json.schoolId]}}"
      },
      "credentials": {"postgres":{"id":"postgres_credential_id"}}
    },
    {
      "id": "5",
      "name": "Postgres - Load Student Balance",
      "type": "n8n-nodes-base.postgres",
      "position": [1200, 400],
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, marks_balance AS balance FROM students WHERE id=$1 AND school_id=$2;",
        "queryParams": "={{[$json.studentId,$json.schoolId]}}"
      },
      "credentials": {"postgres":{"id":"postgres_credential_id"}}
    },
    {
      "id": "6",
      "name": "Pre-check Balance",
      "type": "n8n-nodes-base.function",
      "position": [1500, 300],
      "parameters": {
        "functionCode": "const v=$items('Postgres - Load Voucher Option')[0].json.data[0];const s=$items('Postgres - Load Student Balance')[0].json.data[0];if(!v)throw new Error('Voucher inexistente');if(!s)throw new Error('Aluno inexistente');if(s.balance<v.cost)throw new Error('Saldo insuficiente');return[{json:{...$json,...v,balance:s.balance}}];"
      }
    },
    {
      "id": "7",
      "name": "Build Atomic Transaction (RETURNING id)",
      "type": "n8n-nodes-base.function",
      "position": [1800, 300],
      "parameters": {
        "functionCode": "const{studentId,voucherCatalogId,cost}= $json;const sql=`BEGIN;\\nUPDATE students SET marks_balance=marks_balance-$1 WHERE id=$2;\\nWITH inserted_voucher AS (INSERT INTO redeemed_vouchers (id,student_id,voucher_catalog_id,status,voucher_code,created_at) VALUES (gen_random_uuid(),$2,$3,'PENDING',NULL,NOW()) RETURNING id)\\nINSERT INTO ledger_transactions (id,student_id,type,amount,description,created_at) VALUES (gen_random_uuid(),$2,'DEBIT',$1,'Resgate de voucher',NOW());\\nSELECT id FROM inserted_voucher;\\nCOMMIT;`;return[{json:{sql,values:[cost,studentId,voucherCatalogId]}}];"
      }
    },
    {
      "id": "8",
      "name": "Postgres - Execute Transaction",
      "type": "n8n-nodes-base.postgres",
      "position": [2100, 300],
      "parameters": {
        "operation": "executeQuery",
        "query": "={{$json.sql}}",
        "queryParams": "={{$json.values}}"
      },
      "credentials": {"postgres":{"id":"postgres_credential_id"}}
    },
    {
      "id": "9",
      "name": "HTTP Request - Voucher Provider",
      "type": "n8n-nodes-base.httpRequest",
      "position": [2400, 300],
      "parameters": {
        "url": "={{$env.VOUCHER_PROVIDER_URL}}",
        "method": "POST",
        "jsonParameters": true,
        "bodyParametersJson": "={\"provider\":$json.provider,\"value\":$json.value,\"currency\":$json.currency}"
      },
      "credentials": {"httpBasicAuth":{"id":"voucher_provider_credential_id"}}
    },
    {
      "id": "10",
      "name": "Build Finalize SQL",
      "type": "n8n-nodes-base.function",
      "position": [2700, 300],
      "parameters": {
        "functionCode": "const code=$json.data?.voucherCode||'MOCK-VOUCHER';const rid=$items('Postgres - Execute Transaction')[0].json.data?.[0]?.id;const sql='UPDATE redeemed_vouchers SET status=\\'COMPLETED\\', voucher_code=$1 WHERE id=$2;';return[{json:{sql,params:[code,rid]}}];"
      }
    },
    {
      "id": "11",
      "name": "Postgres - Update Redeem (Finalize)",
      "type": "n8n-nodes-base.postgres",
      "position": [3000, 300],
      "parameters": {
        "operation": "executeQuery",
        "query": "={{$json.sql}}",
        "queryParams": "={{$json.params}}"
      },
      "credentials": {"postgres":{"id":"postgres_credential_id"}}
    },
    {
      "id": "12",
      "name": "Respond - Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [3300, 300],
      "parameters": {
        "responseCode": "200",
        "responseData": "={\"message\":\"Voucher resgatado com sucesso!\",\"voucherCode\":$json.data.voucherCode||'MOCK-VOUCHER'}"
      }
    }
  ],
  "connections": {
    "Webhook - /vouchers/redeem": {"main":[[{"node":"VerifyStudentJWT","type":"main"}]]},
    "VerifyStudentJWT": {"main":[[{"node":"Validate Body","type":"main"}]]},
    "Validate Body": {"main":[[{"node":"Postgres - Load Voucher Option","type":"main"},{"node":"Postgres - Load Student Balance","type":"main"}]]},
    "Postgres - Load Voucher Option": {"main":[[{"node":"Pre-check Balance","type":"main"}]]},
    "Postgres - Load Student Balance": {"main":[[{"node":"Pre-check Balance","type":"main"}]]},
    "Pre-check Balance": {"main":[[{"node":"Build Atomic Transaction (RETURNING id)","type":"main"}]]},
    "Build Atomic Transaction (RETURNING id)": {"main":[[{"node":"Postgres - Execute Transaction","type":"main"}]]},
    "Postgres - Execute Transaction": {"main":[[{"node":"HTTP Request - Voucher Provider","type":"main"}]]},
    "HTTP Request - Voucher Provider": {"main":[[{"node":"Build Finalize SQL","type":"main"}]]},
    "Build Finalize SQL": {"main":[[{"node":"Postgres - Update Redeem (Finalize)","type":"main"}]]},
    "Postgres - Update Redeem (Finalize)": {"main":[[{"node":"Respond - Success","type":"main"}]]}
  }
}
