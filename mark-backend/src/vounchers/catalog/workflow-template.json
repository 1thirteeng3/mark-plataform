{
  "name": "Mark :: Vouchers :: Catalog (GET)",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "path": "vouchers/catalog",
        "httpMethod": "GET",
        "responseMode": "lastNode"
      },
      "id": "Webhook_VouchersCatalog",
      "name": "Webhook - /vouchers/catalog (GET)",
      "type": "n8n-nodes-base.webhook",
      "position": [200, 300]
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\n\nfunction unauthorized(message, code) {\n  return [{ json: { statusCode: 401, error: code, message } }];\n}\nfunction forbidden(message) {\n  return [{ json: { statusCode: 403, error: 'FORBIDDEN', message } }];\n}\n\nconst header = this.getHeader('authorization');\nif (!header || !header.startsWith('Bearer ')) return unauthorized('Token ausente.', 'TOKEN_MISSING');\n\nconst token = header.split(' ')[1];\nconst [h, p, s] = token.split('.');\nif (!h || !p || !s) return unauthorized('Token malformado.', 'TOKEN_MALFORMED');\n\nconst expected = crypto.createHmac('sha256', process.env.JWT_SECRET).update(`${h}.${p}`).digest('base64url');\nif (s !== expected) return unauthorized('Assinatura inválida.', 'TOKEN_INVALID');\n\nconst payload = JSON.parse(Buffer.from(p, 'base64url').toString('utf8'));\nif (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) return unauthorized('Token expirado.', 'TOKEN_EXPIRED');\nif (payload.role !== 'STUDENT') return forbidden('Acesso negado. Apenas alunos podem visualizar o catálogo.');\n\nreturn [{ json: { studentId: payload.userId, schoolId: payload.schoolId, role: payload.role, statusCode: 200 } }];"
      },
      "id": "Function_VerifyStudentJWT",
      "name": "Function - Verify Student JWT",
      "type": "n8n-nodes-base.function",
      "position": [550, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, provider, value, cost, currency, is_available AS \"isAvailable\", image_url AS \"imageUrl\" FROM voucher_catalog WHERE school_id = $1 AND is_available = TRUE ORDER BY cost ASC;",
        "additionalFields": {
          "queryParams": "={{[$json[\"schoolId\"]]}}"
        }
      },
      "id": "Postgres_GetVouchersCatalog",
      "name": "Postgres - Get Vouchers Catalog",
      "type": "n8n-nodes-base.postgres",
      "position": [900, 300],
      "credentials": {
        "postgres": {
          "id": "__CRED_POSTGRES_ID__",
          "name": "MarkDB"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const vouchers = $json.data || [];\nreturn [{ json: vouchers }];"
      },
      "id": "Function_FormatResponse",
      "name": "Function - Format Response",
      "type": "n8n-nodes-base.function",
      "position": [1200, 300]
    },
    {
      "parameters": {
        "responseMode": "onReceived",
        "responseCode": "={{$json[\"statusCode\"] || 200}}",
        "responseData": "={{$json}}"
      },
      "id": "Respond_VouchersCatalog",
      "name": "Respond - /vouchers/catalog (GET)",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [1450, 300]
    }
  ],
  "connections": {
    "Webhook - /vouchers/catalog (GET)": {
      "main": [
        [{ "node": "Function - Verify Student JWT", "type": "main", "index": 0 }]
      ]
    },
    "Function - Verify Student JWT": {
      "main": [
        [{ "node": "Postgres - Get Vouchers Catalog", "type": "main", "index": 0 }]
      ]
    },
    "Postgres - Get Vouchers Catalog": {
      "main": [
        [{ "node": "Function - Format Response", "type": "main", "index": 0 }]
      ]
    },
    "Function - Format Response": {
      "main": [
        [{ "node": "Respond - /vouchers/catalog (GET)", "type": "main", "index": 0 }]
      ]
    }
  },
  "settings": {
    "timezone": "America/Sao_Paulo"
  },
  "tags": ["Vouchers", "Catalog", "GET", "Student", "RBAC"]
}
