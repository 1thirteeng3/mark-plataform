/**
 * VerifyStudentJWT
 *
 * Objetivo:
 *  - Validar o JWT do aluno autenticado.
 *  - Extrair userId (studentId) e schoolId.
 *
 * Segurança:
 *  - Garante que apenas alunos autenticados acessem o catálogo.
 *  - Valida assinatura HS256 e expiração do token.
 */

const crypto = require('crypto');

function unauthorized(message, code) {
  return [{ json: { statusCode: 401, error: code, message } }];
}
function forbidden(message) {
  return [{ json: { statusCode: 403, error: 'FORBIDDEN', message } }];
}

const header = this.getHeader('authorization');
if (!header || !header.startsWith('Bearer ')) {
  return unauthorized('Token ausente.', 'TOKEN_MISSING');
}

const token = header.split(' ')[1];
const [h, p, s] = token.split('.');
if (!h || !p || !s) {
  return unauthorized('Token malformado.', 'TOKEN_MALFORMED');
}

const expected = crypto
  .createHmac('sha256', process.env.JWT_SECRET)
  .update(`${h}.${p}`)
  .digest('base64url');

if (s !== expected) {
  return unauthorized('Assinatura inválida.', 'TOKEN_INVALID');
}

const payload = JSON.parse(Buffer.from(p, 'base64url').toString('utf8'));
if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {
  return unauthorized('Token expirado.', 'TOKEN_EXPIRED');
}

if (payload.role !== 'STUDENT') {
  return forbidden('Acesso negado. Apenas alunos podem visualizar o catálogo.');
}

// sucesso → retorna dados do token
return [
  {
    json: {
      studentId: payload.userId,
      schoolId: payload.schoolId,
      role: payload.role,
      statusCode: 200,
    },
  },
];
