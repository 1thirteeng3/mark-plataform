{
  "name": "Auth - Login",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "auth/login",
        "responseMode": "lastNode"
      },
      "id": "Webhook_AuthLogin",
      "name": "Webhook /auth/login",
      "type": "n8n-nodes-base.webhook",
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, name, email, password_hash, role, school_id FROM users WHERE email = $1;",
        "values": [
          {
            "name": "email",
            "value": "={{$json[\"email\"]}}"
          }
        ]
      },
      "id": "Postgres_GetUser",
      "name": "Get User by Email",
      "type": "n8n-nodes-base.postgres",
      "position": [550, 300],
      "credentials": {
        "postgres": {
          "id": "__CRED_POSTGRES_ID__",
          "name": "MarkDB"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\nconst jwt = require('jsonwebtoken'); // se estiver disponível no ambiente, senão use HMAC manual\n\nconst rows = items[0].json.data || [];\nif (rows.length === 0) {\n  return [{ json: { statusCode: 401, message: 'Usuário não encontrado.' } }];\n}\n\nconst user = rows[0];\nconst providedPassword = $json.password;\n\n// Comparação (exemplo simplificado — em produção usar bcrypt)\nif (user.password_hash !== providedPassword) {\n  return [{ json: { statusCode: 401, message: 'Senha incorreta.' } }];\n}\n\n// Geração do JWT conforme LLD (HS256, payload: userId, role, schoolId)\nconst payload = {\n  userId: user.id,\n  role: user.role,\n  schoolId: user.school_id,\n  iat: Math.floor(Date.now() / 1000),\n  exp: Math.floor(Date.now() / 1000) + 86400 // 1 dia\n};\n\nconst header = Buffer.from(JSON.stringify({ alg: 'HS256', typ: 'JWT' })).toString('base64url');\nconst body = Buffer.from(JSON.stringify(payload)).toString('base64url');\nconst signature = crypto.createHmac('sha256', process.env.JWT_SECRET).update(`${header}.${body}`).digest('base64url');\n\nconst token = `${header}.${body}.${signature}`;\n\nreturn [{\n  json: {\n    accessToken: token,\n    user: {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      role: user.role\n    },\n    statusCode: 200\n  }\n}];"
      },
      "id": "Function_GenerateJWT",
      "name": "Generate JWT",
      "type": "n8n-nodes-base.function",
      "position": [850, 300]
    },
    {
      "parameters": {
        "options": {},
        "responseBody": "={{$json}}",
        "responseCode": "={{$json[\"statusCode\"] || 200}}"
      },
      "id": "Respond_AuthLogin",
      "name": "Respond /auth/login",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [1150, 300]
    }
  ],
  "connections": {
    "Webhook /auth/login": { "main": [ [{ "node": "Get User by Email", "type": "main", "index": 0 }] ] },
    "Get User by Email": { "main": [ [{ "node": "Generate JWT", "type": "main", "index": 0 }] ] },
    "Generate JWT": { "main": [ [{ "node": "Respond /auth/login", "type": "main", "index": 0 }] ] }
  },
  "settings": { "timezone": "America/Sao_Paulo" },
  "tags": ["Auth", "Login", "JWT", "Mark API"]
}
