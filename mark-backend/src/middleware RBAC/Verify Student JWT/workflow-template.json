{
  "name": "Middleware - VerifyStudentJWT",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\n\nfunction unauthorized(message, code) {\n  return [{ json: { statusCode: 401, message, error: code } }];\n}\nfunction forbidden(message) {\n  return [{ json: { statusCode: 403, message, error: 'FORBIDDEN' } }];\n}\n\nconst header = this.getHeader('authorization');\nif (!header || !header.startsWith('Bearer ')) return unauthorized('Token ausente.', 'TOKEN_MISSING');\n\nconst token = header.replace(/^Bearer\\s+/i, '').trim();\nconst [h, p, s] = token.split('.');\nif (!h || !p || !s) return unauthorized('Token malformado.', 'TOKEN_MALFORMED');\n\nconst recalculated = crypto.createHmac('sha256', process.env.JWT_SECRET).update(`${h}.${p}`).digest('base64url');\nif (s !== recalculated) return unauthorized('Assinatura inv√°lida.', 'TOKEN_INVALID_SIGNATURE');\n\nconst payload = JSON.parse(Buffer.from(p, 'base64url').toString('utf8'));\nif (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) return unauthorized('Token expirado.', 'TOKEN_EXPIRED');\n\nif (payload.role !== 'STUDENT') return forbidden('Acesso negado. Somente alunos.');\n\nreturn [{ json: { userId: payload.userId, role: payload.role, schoolId: payload.schoolId, statusCode: 200 } }];"
      },
      "id": "Function_VerifyStudentJWT",
      "name": "VerifyStudentJWT",
      "type": "n8n-nodes-base.function",
      "position": [400, 250]
    },
    {
      "parameters": {
        "responseBody": "={{$json}}",
        "responseCode": "={{$json[\"statusCode\"] || 200}}"
      },
      "id": "Respond_VerifyStudentJWT",
      "name": "Respond VerifyStudentJWT",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [750, 250]
    }
  ],
  "connections": {
    "VerifyStudentJWT": { "main": [ [{ "node": "Respond VerifyStudentJWT", "type": "main", "index": 0 }] ] }
  },
  "settings": { "timezone": "America/Sao_Paulo" },
  "tags": ["Middleware", "RBAC", "Student", "JWT"]
}
